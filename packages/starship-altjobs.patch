diff --git a/src/modules/jobs.rs b/src/modules/jobs.rs
index 47f3cd2..e906d0a 100644
--- a/src/modules/jobs.rs
+++ b/src/modules/jobs.rs
@@ -49,45 +49,39 @@ pub fn module<'a>(context: &'a Context) -> Option<Module<'a>> {
     }
 
     let default_threshold = 1;
-    let mut module_symbol = "";
-    let mut module_number = String::new();
+    let mut module_symbol = String::new();
     if config.threshold != default_threshold {
         log::warn!("`threshold` in [jobs] is deprecated . Please remove it and use `symbol_threshold` and `number_threshold`.");
 
         // The symbol should be shown if there are *any* background
         // jobs running.
         if num_of_jobs > 0 {
-            module_symbol = config.symbol;
+            module_symbol = config.symbol.to_string();
         }
 
         if num_of_jobs > config.threshold || config.threshold == 0 {
-            module_symbol = config.symbol;
-            module_number = num_of_jobs.to_string();
+            module_symbol = config.symbol.repeat(num_of_jobs as usize);
         }
     } else {
-        if num_of_jobs >= config.symbol_threshold {
-            module_symbol = config.symbol;
+        if num_of_jobs >= config.symbol_threshold && num_of_jobs < config.number_threshold {
+            module_symbol = config.symbol.to_string();
         }
 
         if num_of_jobs >= config.number_threshold {
-            module_number = num_of_jobs.to_string();
+            module_symbol = config.symbol.repeat(num_of_jobs as usize);
         }
     }
 
     let parsed = StringFormatter::new(config.format).and_then(|formatter| {
         formatter
-            .map_meta(|var, _| match var {
-                "symbol" => Some(module_symbol),
+            .map(|var| match var {
+                "symbol" => Some(Ok(module_symbol.clone())),
                 _ => None,
             })
             .map_style(|variable| match variable {
                 "style" => Some(Ok(config.style)),
                 _ => None,
             })
-            .map(|variable| match variable {
-                "number" => Some(Ok(module_number.clone())),
-                _ => None,
-            })
             .parse(None)
     });
 
